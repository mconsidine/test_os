name: Build Armbian for RockPi-4B+

on:

  workflow_dispatch: # Allows manual triggering of the workflow


jobs:
  build-armbian:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add a script tot he custom files (this is for specific installs)
        run: |
          cat << 'EOF' > ./custom-pkg-list/00-install/00-run.sh
          #!/bin/bash

          # where is this being run from?
          echo "IN 00-install/00-run.sh"
          echo "Should be image root"
          pwd
          ls -als
          
          # Path to the 00-packages file
          PACKAGES_FILE="tmp/overlay/custom-pkg-list/00-install/00-packages"
          # Check if the packages file exists
          if [ ! -f "$PACKAGES_FILE" ]; then
            echo "Packages file not found: $PACKAGES_FILE"
            exit 1
          fi

          # Read the packages file and install each package
          while IFS= read -r package; do
            if [ -n "$package" ]; then
              echo "Installing package: $package"
              apt-get install -y "$package"
            fi
          done < "$PACKAGES_FILE"
          EOF

      - name: Clone Armbian build repository
        run: |
          echo "Should be source folder"
          git clone --depth 1 https://github.com/armbian/build.git

      - name: CHECK Source level with build folder from armbian
        run : |
          ls -lha
          echo "Should be build folder"
          ls -lha build

      - name: Create userpatches and userpatches/overlay
        run : |
          # build/userpatches/overlay gets copied to tmp/overlay
          # want to make customize-image.sh, which will get run shortly before img is finalized
          # customize-image.sh is run from the root of the to-be-finalized image
          # at this point though we are still at the source level ...
          echo "WE ARE NOW HERE at source folder..."
          pwd
          ls -als

          # make folder tree. this will be visible in final image at tmp/overlay
          mkdir -p build/userpatches/overlay

      - name : Copy files to what will be tmp/overlay and create customize-image.sh
        run: |
          rsync -av custom-pkg-list build/userpatches/overlay

          # create customize-image.sh 'in line' and put in userpatches for build execution
          cat > build/userpatches/customize-image.sh <<-EOF
          #!/bin/bash          
          # anything done in here is in to-be-finalized image, starting at root (ie \)
          
          # do we need to do apt-get update and/or install git, gcc, etc???
          # START OF WIFI CONFIG
          # Enable hostapd and configure DHCP server for access point
          apt update
          apt install -y hostapd dnsmasq
          systemctl stop hostapd dnsmasq

          # Configure hostapd
          cat <<EOF > /etc/hostapd/hostapd.conf
          interface=wlan0
          driver=nl80211
          ssid=RockPi-AccessPoint
          hw_mode=g
          channel=6
          macaddr_acl=0
          auth_algs=1
          ignore_broadcast_ssid=0
          wpa=2
          wpa_passphrase=rockpi1234
          wpa_key_mgmt=WPA-PSK
          rsn_pairwwise=CCMP
          EOT

          # Point hostapd to the new configuration
          sed -i 's|#DAEMON_CONF="DAEMON_CONF="/etc/hostapd/hostapd.conf|g' /etc/default/hostapd

          #Configure DHCP server
          cat <<EOT > /etc/dnsmasq.conf
          interface=wlan0
          dhcp-range=192.168.4.2,192.168.4.20,255.255.255.0,24h
          EOT

          # Configure network interfaces
          cat <<EOT > /etc/network/interfaces.d/wlan0
          auto wlan0
          iface wlan0 inet static
          address 192.168.4.1
          netmask 255.255.255.0
          EOT

          # Enable services at startup
          systemctl unmask hostapd
          systemctl enable hostapd
          systemctl enable dsnmasq
          # END OF WIFI CONFIG
          
          # fwiw, this is running as chroot, so dont need sudo
          echo "This should be image root"
          apt list | grep git

          echo "HERE WE ARE"
          pwd
          ls -als
          ls -alsr tmp/overlay/custom-pkg-list
          cp -a tmp/overlay/custom-pkg-list home
          chmod +x home/custom-pkg-list/00-install/00-run.sh
          apt-get update
          apt-get install git -y
          home/custom-pkg-list/00-install/00-run.sh
          EOF

          chmod +x build/userpatches/customize-image.sh
          
      - name: Configure build
        run: |
          cd build
          ./compile.sh EXPERT=yes \
            BOARD=rockpi-4bplus \
            BRANCH=current \
            RELEASE=bullseye \
            BUILD_MINIMAL=yes \
            BUILD_DESKTOP=no \
            KERNEL_CONFIGURE=no \
            COMPRESS_OUTPUTIMAGE=xz \
            IMAGE_XZ_COMPRESSION_RATIO=6
            #ENABLE_SSH=yes \
            #HOSTNAME=test_os \

      - name: We are at the top level
        run: |
          ls -lha
          ls -lha build
          ls -lha build/output
          ls -lha build/output/images
          ls -als build
          
      - name: Upload Armbian image
        uses: actions/upload-artifact@v4
        with:
          name: armbian-image
          # we cd'd into build just above, this is run from that folder
          path: build/output/images/*.xz
